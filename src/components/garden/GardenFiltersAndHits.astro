---
import NoteCard from "../cards/NoteCard.astro";
import GardenCollections from "./GardenCollections.astro";
// import { Icon } from "astro-icon/components";

interface Props {
  allPostData: any[];
}

const { allPostData } = Astro.props;

// Get unique topics from all posts
const topics = [...new Set(allPostData.flatMap(post => post.data.topics || []))].sort();

// Count posts per topic
const topicCounts = {};
topics.forEach(topic => {
  topicCounts[topic] = allPostData.filter(post => 
    post.data.topics && post.data.topics.includes(topic)
  ).length;
});
---

<div class="garden-layout">
  <div class="collections-column">
    <GardenCollections topics={topics} counts={topicCounts} />
  </div>

  <main class="notes-column">
    <div class="notes-header">
      <h2 class="notes-title">NOTES</h2>
      <div class="filters-container">
        <div class="select-wrapper">
          <select id="sort-select" aria-label="Sort">
            <option value="newest">Newest First</option>
            <option value="oldest">Oldest First</option>
          </select>
          <span class="chevron">▼</span>
        </div>
        <div class="select-wrapper">
          <select id="growth-stages-select" aria-label="Growth Stages">
            <option value="">All Growth Stages</option>
            <option value="seedling">Seedling</option>
            <option value="budding">Budding</option>
            <option value="evergreen">Evergreen</option>
          </select>
          <span class="chevron">▼</span>
        </div>
      </div>
    </div>
    <div class="notes-list">
      {allPostData.map(post => (
        <NoteCard note={post} />
      ))}
    </div>
  </main>
</div>

<style>
  .garden-layout {
    display: grid;
    grid-template-columns: 40% 60%;
    gap: 2rem;
    align-items: start;
  }
  
  .collections-column {
    min-width: 0;
    position: static;
    max-height: none;
    overflow-y: visible;
  }
  
  .notes-column {
    min-width: 0;
  }
  
  .notes-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }
  
  .notes-title {
    font-size: 1.2rem;
    color: #666;
    margin: 0;
  }
  
  .filters-container {
    display: flex;
    gap: 0.5rem;
  }
  
  .select-wrapper {
    position: relative;
    display: inline-block;
  }
  
  .chevron {
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    color: #777;
    pointer-events: none;
    font-size: 0.6rem;
  }
  
  select {
    padding: 0.3rem 1.5rem 0.3rem 0.5rem;
    border-radius: 4px;
    border: 1px solid #ddd;
    color: #666;
    background-color: white;
    appearance: none;
    font-size: 0.8rem;
    cursor: pointer;
  }
  
  select:hover {
    border-color: #bbb;
  }
  
  .notes-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  @media (max-width: 768px) {
    .garden-layout {
      grid-template-columns: 1fr;
    }
    
    .notes-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    
    .filters-container {
      width: 100%;
    }
    
    .select-wrapper {
      flex: 1;
    }
    
    select {
      width: 100%;
    }
  }
</style>

<script>
  // Add client-side filtering and sorting logic
  document.addEventListener('DOMContentLoaded', () => {
    const sortSelect = document.getElementById('sort-select');
    const growthStageSelect = document.getElementById('growth-stages-select');
    const noteCards = document.querySelectorAll('.note-card');
    
    // Function to sort notes
    function sortNotes() {
      const sortValue = sortSelect.value;
      const notesContainer = document.querySelector('.notes-list');
      const notesArray = Array.from(noteCards);
      
      notesArray.sort((a, b) => {
        const dateA = new Date(a.dataset.date || 0).getTime();
        const dateB = new Date(b.dataset.date || 0).getTime();
        
        return sortValue === 'newest' ? dateB - dateA : dateA - dateB;
      });
      
      // Remove all notes and re-append in sorted order
      notesArray.forEach(note => {
        notesContainer.appendChild(note);
      });
    }
    
    // Function to filter by growth stage
    function filterByGrowthStage() {
      const growthStage = growthStageSelect.value;
      
      noteCards.forEach(card => {
        const cardGrowthStage = card.dataset.growthStage;
        
        if (!growthStage || cardGrowthStage === growthStage) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    }
    
    // Add event listeners
    if (sortSelect) {
      sortSelect.addEventListener('change', sortNotes);
    }
    
    if (growthStageSelect) {
      growthStageSelect.addEventListener('change', filterByGrowthStage);
    }
    
    // Initialize sorting
    if (sortSelect) {
      sortNotes();
    }
  });
</script>



