---
interface Props {
  href: string;
  variant?: 'primary' | 'secondary';
  icon?: string;
  class?: string;
}

const { 
  href, 
  variant = 'primary', 
  icon, 
  class: className = '' 
} = Astro.props;
---

<a href={href} class:list={['button', variant, className]}>
  <span class="button-text"><slot /></span>
  {icon && (
    <span class="icon">
      {icon === 'arrow' && <span class="arrow">â†’</span>}
      {icon === 'logo' && <img src="/images/lg.png" alt="KTTLSAA Logo" class="logo-icon" />}
    </span>
  )}
</a>

<style>
  .button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 2rem;
    border-radius: 0px; /* Changed from 50px to 0px */
    text-decoration: none;
    font-family: var(--font-fun);
    font-size: 1.1rem;
    transition: all 0.3s ease;
    min-width: 200px;
    text-align: center;
    font-weight: normal;
  }
  
  .button-text {
    line-height: 1.2;
  }

  .icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin-left: 0.5rem;
  }

  .arrow {
    font-size: 1.2rem;
    line-height: 1;
  }

  .logo-icon {
    width: 20px;
    height: 20px;
  }

  /* Primary button - white with black border */
  .primary {
    background-color: white;
    color: black;
    border: 1px solid black;
  }

  .primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  /* Secondary button - orange */
  .secondary {
    background-color: #FF9B5A;
    color: black;
    border: none;
  }

  .secondary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  /* Override any inline styles */
  :global(.button),
  :global(button),
  :global(a.button) {
    border-radius: 0 !important;
  }
</style>








