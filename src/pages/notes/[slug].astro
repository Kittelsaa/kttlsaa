---
import { getCollection, getEntry } from 'astro:content';
import NoteLayout from '../../layouts/NoteLayout.astro';
import OutboundLinks from '../../components/OutboundLinks.astro';
import { findBacklinks, getOutboundLinks } from '../../utils/noteUtils';
import { render } from 'astro:content';

export async function getStaticPaths() {
  const notes = await getCollection('notes');
  
  return notes.map(note => {
    // Use the file path as the slug if not explicitly defined
    const slug = note.slug || note.id.split('/').pop().replace(/\.(md|mdx)$/, '');
    
    if (!slug) {
      console.warn(`Note with title "${note.data.title}" has no slug`);
      return null;
    }
    
    return {
      params: { slug },
      props: { note }
    };
  }).filter(Boolean);
}

const { slug } = Astro.params;
if (!slug) {
  return Astro.redirect('/404');
}

const { note } = Astro.props;

// Use a try-catch block to handle potential MDX rendering errors
let Content;
try {
  // Use the new render function from astro:content
  const rendered = await render(note);
  Content = rendered.Content;
} catch (error) {
  console.error(`Error rendering note ${slug}:`, error);
  return Astro.redirect('/500?error=rendering-failed');
}

// Get backlinks and outbound links
const backlinks = await findBacklinks(note.slug, 1) || [];
const outboundLinks = await getOutboundLinks(note, 1) || [];
---

<NoteLayout frontmatter={note.data} backlinks={backlinks}>
  <div class="note-main-content">
    <Content />
  </div>
  
  <div class="note-connections">
    {outboundLinks.length > 0 && (
      <OutboundLinks links={outboundLinks} />
    )}
  </div>
</NoteLayout>

<style>
  .note-main-content {
    margin-bottom: var(--space-xl);
  }
  
  .note-connections {
    margin-top: var(--space-xl);
    padding-top: var(--space-m);
    border-top: 1px solid var(--color-border);
  }
</style>




