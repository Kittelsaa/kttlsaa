---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import PageWrapper from '../../components/layouts/PageWrapper.astro';
import GrowthIcon from '../../components/GrowthIcon.astro';
import Backlinks from '../../components/Backlinks.astro';
import OutboundLinks from '../../components/OutboundLinks.astro';
import { getBacklinks, getOutboundLinks } from '../../utils/noteUtils.ts';

export async function getStaticPaths() {
  const notes = await getCollection('notes');
  
  return notes.map(note => {
    // Ensure slug is never undefined
    if (!note.slug) {
      console.warn(`Note with title "${note.data.title}" has no slug`);
      return null;
    }
    
    return {
      params: { slug: note.slug },
      props: { note }
    };
  }).filter(Boolean); // Remove any null entries
}

const { slug } = Astro.params;
if (!slug) {
  return Astro.redirect('/404');
}

const { note } = Astro.props;
const { Content } = await note.render();

// Get backlinks and outbound links
const backlinks = await getBacklinks(note.slug);
const outboundLinks = await getOutboundLinks(note);
---

<Layout title={`${note.data.title} | KTTLSAA`} description={note.data.description}>
  <PageWrapper>
    <article class="note">
      <header>
        <div class="metadata">
          <span class="growth-stage">
            <GrowthIcon growthStage={note.data.growthStage} />
            {note.data.growthStage}
          </span>
          <span class="date">Last tended: {new Date(note.data.updated).toLocaleDateString()}</span>
        </div>
        <h1>{note.data.title}</h1>
        {note.data.description && <p class="description">{note.data.description}</p>}
        {note.data.topics && (
          <div class="topics">
            {note.data.topics.map(topic => (
              <a href={`/notes/topics/${topic.toLowerCase().replace(/ /g, '-')}`} class="topic">{topic}</a>
            ))}
          </div>
        )}
      </header>
      
      <div class="content">
        <Content />
      </div>
      
      <footer class="note-connections">
        <div class="connections-grid">
          <OutboundLinks outboundLinks={outboundLinks} />
          <Backlinks backlinks={backlinks} />
        </div>
      </footer>
    </article>
  </PageWrapper>
</Layout>

<style>
  .note {
    max-width: 65ch;
    margin: 0 auto;
    padding: var(--space-xl) var(--space-m);
  }
  
  header {
    margin-bottom: var(--space-xl);
  }
  
  .metadata {
    display: flex;
    gap: var(--space-m);
    margin-bottom: var(--space-s);
    font-size: 0.9rem;
    color: var(--color-text-muted);
  }
  
  .growth-stage {
    display: flex;
    align-items: center;
    gap: var(--space-2xs);
  }
  
  h1 {
    font-family: 'Averia Serif Libre', serif !important;
    font-size: 2.5rem;
    line-height: 1.2;
    margin-bottom: var(--space-m);
  }
  
  .description {
    font-size: 1.2rem;
    color: var(--color-text-muted);
    margin-bottom: var(--space-m);
    line-height: 1.5;
  }
  
  .topics {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xs);
  }
  
  .topic {
    background-color: var(--color-bg-alt);
    padding: var(--space-3xs) var(--space-xs);
    border-radius: var(--radius-s);
    font-size: 0.85rem;
    text-decoration: none;
    color: var(--color-text);
    transition: background-color 0.2s ease;
  }
  
  .topic:hover {
    background-color: var(--color-accent-light);
  }
  
  .content {
    font-size: 1.05rem;
    line-height: 1.7;
  }
  
  .content :global(h2) {
    font-family: 'Averia Serif Libre', serif !important;
    font-size: 1.8rem;
    margin-top: var(--space-xl);
    margin-bottom: var(--space-m);
  }
  
  .content :global(h3) {
    font-family: 'Averia Serif Libre', serif !important;
    font-size: 1.4rem;
    margin-top: var(--space-l);
    margin-bottom: var(--space-s);
  }
  
  .content :global(p) {
    margin-bottom: var(--space-m);
  }
  
  .content :global(ul), .content :global(ol) {
    margin-bottom: var(--space-m);
    padding-left: var(--space-m);
  }
  
  .content :global(li) {
    margin-bottom: var(--space-xs);
  }
  
  .content :global(pre) {
    margin: var(--space-m) 0;
    padding: var(--space-m);
    border-radius: var(--radius-m);
    overflow-x: auto;
  }
  
  .content :global(blockquote) {
    border-left: 4px solid var(--color-accent);
    padding-left: var(--space-m);
    margin: var(--space-m) 0;
    font-style: italic;
  }
  
  .content :global(.wiki-link) {
    color: var(--color-accent);
    text-decoration: none;
    border-bottom: 1px dashed var(--color-accent);
  }
  
  .connections-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-m);
  }
  
  .note-connections {
    margin-top: var(--space-2xl);
  }
  
  @media (max-width: 768px) {
    .note {
      padding: var(--space-l) var(--space-s);
    }
    
    header {
      margin-bottom: var(--space-l);
    }
    
    .metadata {
      flex-direction: column;
      gap: var(--space-xs);
    }
    
    h1 {
      font-size: 2rem;
      margin-bottom: var(--space-s);
    }
    
    .description {
      font-size: 1.1rem;
    }
    
    .content {
      font-size: 1rem;
    }
    
    .content :global(h2) {
      font-size: 1.6rem;
      margin-top: var(--space-l);
    }
    
    .content :global(h3) {
      font-size: 1.3rem;
    }
    
    .connections-grid {
      grid-template-columns: 1fr;
    }
  }
  
  @media (max-width: 480px) {
    .note {
      padding: var(--space-m) var(--space-xs);
    }
    
    h1 {
      font-size: 1.75rem;
    }
    
    .description {
      font-size: 1rem;
    }
    
    .content {
      font-size: 0.95rem;
    }
    
    .content :global(h2) {
      font-size: 1.4rem;
    }
    
    .content :global(h3) {
      font-size: 1.2rem;
    }
    
    .content :global(pre) {
      padding: var(--space-s);
    }
    
    .topics {
      flex-direction: column;
      align-items: flex-start;
    }
  }
</style>




